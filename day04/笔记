
面向 AOP 编程

    几个术语
       连接点（joinpoint）：程序的执行流程中的某一个点，通常是一个方法执行的某一个时机
       通知（advice）：要加入到连接点中的某一段代码
       切入点（pointcut）：一系列的连接点的集合
       切面（aspect）：切入点+通知
       织入（weaving）：将通知植入目标之中

    几种切入切入点表达式
        execution(public * *(..)) 所有public方法
        execution(* set*(..)) 所有名称以set开头的方法
        execution(* jee.pk.UserDao.*(..)) 所有UserDao接口中定义的方法
        execution(* jee.pk.*.*(..)) jee.pk包中的所有方法
        execution(* jee.pk..*.*(..)) jee.pk包和子包中的所有方法

    通知类型
        before 前置通知
        after 最终通知，不管方法是否正常结束，都会得到执行
        around 环绕通知，包含其他通知，可以控制目标方法的执行，可以修改目标方法的返回值
        after-returning 后置通知，当方法正常结束时会得到执行，如果方法抛出异常就不会得到执行
        after-throwing 例外通知，当方法抛出异常时会得到执行
            获取连接点签名和方法参数：JoinPoint和ProceedingJoinPoint。
            在环绕通知中可以使用ProceedingJoinPoint，其他通知中使用JoinPoint。
            获取方法返回值和抛出的异常


    xml 文件配置 AOP

        名称空间
            xmlns:aop="http://www.springframework.org/schema/aop"
            xsi:schemaLocation="http://www.springframework.org/schema/aop
                                https://www.springframework.org/schema/aop/spring-aop.xsd"

        <bean id="clientDao" class="com.kc.aop1.ClientDaoImpl"/>
        <bean id="userDao" class="com.kc.aop1.UserDaoImpl"/>

        <!-- 保存通知内容的 bean  -->
        <bean id="daoAdvice" class="com.kc.aop1.DaoAdvice"/>


        <!-- proxy-target-class="true" cglib 代理  false jdk 代理 -->
        <aop:config proxy-target-class="true">
            <!-- 切面：切入点 + 通知 -->
            <aop:aspect ref="daoAdvice">
                <!--
                    切入点 切入点表达式 execution(* com.kc.aop1.*Impl.*(..))
                    * com.kc.aop1.*Impl.*(..) 任何返回值类型(*) com.kc.aop1包中的以Impl结尾的所有类(com.kc.aop1.*Impl) 任何方法(*) 任何参数(..)
                 -->
                <aop:pointcut id="daoPointcut" expression="execution(* com.kc.aop1.*Impl.*(..))"/>

                <!-- com.kc.aop1.DaoAdvice 类的 beforeAdvice 方法  -->
    <!--            <aop:before pointcut-ref="daoPointcut" method="beforeAdvice"/>-->
    <!--            <aop:after method="afterAdvice" pointcut-ref="daoPointcut"/>-->
    <!--            <aop:around method="aroundAdvice" pointcut-ref="daoPointcut"/>-->
    <!--            <aop:after-returning method="afterReturningAdvice" pointcut-ref="daoPointcut" returning="r"/>-->
    <!--            <aop:after-throwing method="afterThrowingAdvice" pointcut-ref="daoPointcut" throwing="e"/>-->

            </aop:aspect>
        </aop:config>


    注解配置 AOP
        <context:component-scan base-package="需要扫描的包"/>

        <!-- 激活 Aspectj 注解-->
        <aop:aspectj-autoproxy proxy-target-class="true cglib 代理    false jbk 代理"/>

        通知注解
            @Component
            @Aspect // 表示切面注解
            public class 通知 {

            //切入点
            @Pointcut("切入点表达式")
            public void daoPointcut(){}


    通知类

        @Component
        @Aspect // 表示切面注解
        public class DaoAdvice {

            //切入点
            @Pointcut("execution(* com.kc.aop1.*Impl.*(..))")
            public void daoPointcut(){}

             /*
                before 前置通知
                after 最终通知，不管方法是否正常结束，都会得到执行
                around 环绕通知，包含其他通知，可以控制目标方法的执行，可以修改目标方法的返回值
                after-returning 后置通知，当方法正常结束时会得到执行，如果方法抛出异常就不会得到执行
                after-throwing 例外通知，当方法抛出异常时会得到执行
             */

            //目标执行前   jp 当前连接点
            @Before("daoPointcut()&&args(obj,..)")//引用daoPointcut切入点
            public void beforeAdvice(JoinPoint jp,Object obj) {
                obj = new Date();

        //        jp.getSignature() 连接点签名   jp.getArgs() 获取方法参数
                System.out.println("before 前置通知:"+jp.getSignature().toLongString()+"，方法参数："+ Arrays.toString(jp.getArgs())+",时间："+obj);
            }


            //目标执行后
            @After("daoPointcut()")
            public void afterAdvice(JoinPoint jp) {
                System.out.println("after 最终通知，不管方法是否正常结束，都会得到执行:"+jp.getSignature().toLongString());
            }

            //执行前一次 执行后一次  在环绕通知中可以使用ProceedingJoinPoint，其他通知中使用JoinPoint。
            @Around("daoPointcut()")
            public Object aroundAdvice(ProceedingJoinPoint pjp) throws Throwable {
                System.out.println("环绕通知，包含其他通知，可以控制目标方法的执行，可以修改目标方法的返回值");

                Object p = null;

                try {
                     p = pjp.proceed();//调用目标方法  结果是目标方法的返回值(ClientDaoImpl的insert()方法的返回值)

                } catch (Throwable e) {
                    System.out.println("around  throwing 列外通知:"+pjp.getSignature().toLongString());//列外通知
                    throw e;
                }finally {
                    System.out.println("around 最终通知:"+pjp.getSignature().toLongString());//最终通知
                }

                System.out.println("around 正常后置通知:"+pjp.getSignature().toLongString());//后置通知
                return p;
            }


            //正常执行时 执行后
            // r 用于保存目标方法的返回值
            @AfterReturning(pointcut = "daoPointcut()",returning = "r")
            public void afterReturningAdvice(@org.jetbrains.annotations.NotNull JoinPoint jp, Object r){
                System.out.println("after-returning 后置通知，当方法正常结束时会得到执行，如果方法抛出异常就不会得到执行:"+jp.getSignature().toLongString()+",目标方法的返回值："+r);
            }

            //异常执行时 执行后
            // e 保存目标方法的异常
            @AfterThrowing(pointcut = "daoPointcut()",throwing = "e")
            public void afterThrowingAdvice(JoinPoint jp,Throwable e){
                System.out.println("after-throwing 例外通知，当方法抛出异常时会得到执行:"+jp.getSignature().toLongString()+"，异常信息："+e.getMessage());
            }






        }




























































